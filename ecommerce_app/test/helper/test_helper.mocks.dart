// Mocks generated by Mockito 5.4.4 from annotations
// in ecommerce_app/test/helper/test_helper.dart.
// Do not manually edit this file.

// ignore_for_file: no_leading_underscores_for_library_prefixes
import 'dart:async' as _i12;
import 'dart:convert' as _i23;
import 'dart:typed_data' as _i25;

import 'package:dartz/dartz.dart' as _i3;
import 'package:ecommerce_app/core/error/failure.dart' as _i13;
import 'package:ecommerce_app/core/network/network_info.dart' as _i21;
import 'package:ecommerce_app/feature/product/data/datasource/product_local_data_source.dart'
    as _i20;
import 'package:ecommerce_app/feature/product/data/datasource/product_remote_data_source.dart'
    as _i19;
import 'package:ecommerce_app/feature/product/data/models/product_model.dart'
    as _i8;
import 'package:ecommerce_app/feature/product/domain/entities/product.dart'
    as _i14;
import 'package:ecommerce_app/feature/product/domain/repositories/create_product_repository.dart'
    as _i2;
import 'package:ecommerce_app/feature/product/domain/repositories/delete_product_repository.dart'
    as _i5;
import 'package:ecommerce_app/feature/product/domain/repositories/get_all_products_repository.dart'
    as _i6;
import 'package:ecommerce_app/feature/product/domain/repositories/get_product_repository.dart'
    as _i7;
import 'package:ecommerce_app/feature/product/domain/repositories/update_product_repository.dart'
    as _i4;
import 'package:ecommerce_app/feature/product/domain/usecases/create_product_usecase.dart'
    as _i11;
import 'package:ecommerce_app/feature/product/domain/usecases/delete_product_usecase.dart'
    as _i16;
import 'package:ecommerce_app/feature/product/domain/usecases/get_all_products_usecase.dart'
    as _i17;
import 'package:ecommerce_app/feature/product/domain/usecases/get_product_usecase.dart'
    as _i18;
import 'package:ecommerce_app/feature/product/domain/usecases/update_product_usecase.dart'
    as _i15;
import 'package:http/http.dart' as _i10;
import 'package:internet_connection_checker/internet_connection_checker.dart'
    as _i9;
import 'package:mockito/mockito.dart' as _i1;
import 'package:mockito/src/dummies.dart' as _i24;
import 'package:shared_preferences/shared_preferences.dart' as _i22;

// ignore_for_file: type=lint
// ignore_for_file: avoid_redundant_argument_values
// ignore_for_file: avoid_setters_without_getters
// ignore_for_file: comment_references
// ignore_for_file: deprecated_member_use
// ignore_for_file: deprecated_member_use_from_same_package
// ignore_for_file: implementation_imports
// ignore_for_file: invalid_use_of_visible_for_testing_member
// ignore_for_file: prefer_const_constructors
// ignore_for_file: unnecessary_parenthesis
// ignore_for_file: camel_case_types
// ignore_for_file: subtype_of_sealed_class

class _FakeCreateProductRepository_0 extends _i1.SmartFake
    implements _i2.CreateProductRepository {
  _FakeCreateProductRepository_0(
    Object parent,
    Invocation parentInvocation,
  ) : super(
          parent,
          parentInvocation,
        );
}

class _FakeEither_1<L, R> extends _i1.SmartFake implements _i3.Either<L, R> {
  _FakeEither_1(
    Object parent,
    Invocation parentInvocation,
  ) : super(
          parent,
          parentInvocation,
        );
}

class _FakeUpdateProductRepository_2 extends _i1.SmartFake
    implements _i4.UpdateProductRepository {
  _FakeUpdateProductRepository_2(
    Object parent,
    Invocation parentInvocation,
  ) : super(
          parent,
          parentInvocation,
        );
}

class _FakeDeleteProductRepository_3 extends _i1.SmartFake
    implements _i5.DeleteProductRepository {
  _FakeDeleteProductRepository_3(
    Object parent,
    Invocation parentInvocation,
  ) : super(
          parent,
          parentInvocation,
        );
}

class _FakeGetAllProductRepository_4 extends _i1.SmartFake
    implements _i6.GetAllProductRepository {
  _FakeGetAllProductRepository_4(
    Object parent,
    Invocation parentInvocation,
  ) : super(
          parent,
          parentInvocation,
        );
}

class _FakeGetProductRepository_5 extends _i1.SmartFake
    implements _i7.GetProductRepository {
  _FakeGetProductRepository_5(
    Object parent,
    Invocation parentInvocation,
  ) : super(
          parent,
          parentInvocation,
        );
}

class _FakeProductModel_6 extends _i1.SmartFake implements _i8.ProductModel {
  _FakeProductModel_6(
    Object parent,
    Invocation parentInvocation,
  ) : super(
          parent,
          parentInvocation,
        );
}

class _FakeDuration_7 extends _i1.SmartFake implements Duration {
  _FakeDuration_7(
    Object parent,
    Invocation parentInvocation,
  ) : super(
          parent,
          parentInvocation,
        );
}

class _FakeAddressCheckResult_8 extends _i1.SmartFake
    implements _i9.AddressCheckResult {
  _FakeAddressCheckResult_8(
    Object parent,
    Invocation parentInvocation,
  ) : super(
          parent,
          parentInvocation,
        );
}

class _FakeResponse_9 extends _i1.SmartFake implements _i10.Response {
  _FakeResponse_9(
    Object parent,
    Invocation parentInvocation,
  ) : super(
          parent,
          parentInvocation,
        );
}

class _FakeStreamedResponse_10 extends _i1.SmartFake
    implements _i10.StreamedResponse {
  _FakeStreamedResponse_10(
    Object parent,
    Invocation parentInvocation,
  ) : super(
          parent,
          parentInvocation,
        );
}

/// A class which mocks [CreateProductUsecase].
///
/// See the documentation for Mockito's code generation for more information.
class MockCreateProductUsecase extends _i1.Mock
    implements _i11.CreateProductUsecase {
  MockCreateProductUsecase() {
    _i1.throwOnMissingStub(this);
  }

  @override
  _i2.CreateProductRepository get createProductRepository =>
      (super.noSuchMethod(
        Invocation.getter(#createProductRepository),
        returnValue: _FakeCreateProductRepository_0(
          this,
          Invocation.getter(#createProductRepository),
        ),
      ) as _i2.CreateProductRepository);

  @override
  set createProductRepository(
          _i2.CreateProductRepository? _createProductRepository) =>
      super.noSuchMethod(
        Invocation.setter(
          #createProductRepository,
          _createProductRepository,
        ),
        returnValueForMissingStub: null,
      );

  @override
  _i12.Future<_i3.Either<_i13.Failure, _i14.ProductEntity>> call(
          _i14.ProductEntity? product) =>
      (super.noSuchMethod(
        Invocation.method(
          #call,
          [product],
        ),
        returnValue:
            _i12.Future<_i3.Either<_i13.Failure, _i14.ProductEntity>>.value(
                _FakeEither_1<_i13.Failure, _i14.ProductEntity>(
          this,
          Invocation.method(
            #call,
            [product],
          ),
        )),
      ) as _i12.Future<_i3.Either<_i13.Failure, _i14.ProductEntity>>);
}

/// A class which mocks [UpdateProductUsecase].
///
/// See the documentation for Mockito's code generation for more information.
class MockUpdateProductUsecase extends _i1.Mock
    implements _i15.UpdateProductUsecase {
  MockUpdateProductUsecase() {
    _i1.throwOnMissingStub(this);
  }

  @override
  _i4.UpdateProductRepository get updateProductRepository =>
      (super.noSuchMethod(
        Invocation.getter(#updateProductRepository),
        returnValue: _FakeUpdateProductRepository_2(
          this,
          Invocation.getter(#updateProductRepository),
        ),
      ) as _i4.UpdateProductRepository);

  @override
  set updateProductRepository(
          _i4.UpdateProductRepository? _updateProductRepository) =>
      super.noSuchMethod(
        Invocation.setter(
          #updateProductRepository,
          _updateProductRepository,
        ),
        returnValueForMissingStub: null,
      );

  @override
  _i12.Future<_i3.Either<_i13.Failure, _i14.ProductEntity>> call(
          _i14.ProductEntity? product) =>
      (super.noSuchMethod(
        Invocation.method(
          #call,
          [product],
        ),
        returnValue:
            _i12.Future<_i3.Either<_i13.Failure, _i14.ProductEntity>>.value(
                _FakeEither_1<_i13.Failure, _i14.ProductEntity>(
          this,
          Invocation.method(
            #call,
            [product],
          ),
        )),
      ) as _i12.Future<_i3.Either<_i13.Failure, _i14.ProductEntity>>);
}

/// A class which mocks [DeleteProductUsecase].
///
/// See the documentation for Mockito's code generation for more information.
class MockDeleteProductUsecase extends _i1.Mock
    implements _i16.DeleteProductUsecase {
  MockDeleteProductUsecase() {
    _i1.throwOnMissingStub(this);
  }

  @override
  _i5.DeleteProductRepository get deleteProductRepository =>
      (super.noSuchMethod(
        Invocation.getter(#deleteProductRepository),
        returnValue: _FakeDeleteProductRepository_3(
          this,
          Invocation.getter(#deleteProductRepository),
        ),
      ) as _i5.DeleteProductRepository);

  @override
  set deleteProductRepository(
          _i5.DeleteProductRepository? _deleteProductRepository) =>
      super.noSuchMethod(
        Invocation.setter(
          #deleteProductRepository,
          _deleteProductRepository,
        ),
        returnValueForMissingStub: null,
      );

  @override
  _i12.Future<_i3.Either<_i13.Failure, void>> call(String? id) =>
      (super.noSuchMethod(
        Invocation.method(
          #call,
          [id],
        ),
        returnValue: _i12.Future<_i3.Either<_i13.Failure, void>>.value(
            _FakeEither_1<_i13.Failure, void>(
          this,
          Invocation.method(
            #call,
            [id],
          ),
        )),
      ) as _i12.Future<_i3.Either<_i13.Failure, void>>);
}

/// A class which mocks [GetAllProductUsecase].
///
/// See the documentation for Mockito's code generation for more information.
class MockGetAllProductUsecase extends _i1.Mock
    implements _i17.GetAllProductUsecase {
  MockGetAllProductUsecase() {
    _i1.throwOnMissingStub(this);
  }

  @override
  _i6.GetAllProductRepository get getAllProductRepository =>
      (super.noSuchMethod(
        Invocation.getter(#getAllProductRepository),
        returnValue: _FakeGetAllProductRepository_4(
          this,
          Invocation.getter(#getAllProductRepository),
        ),
      ) as _i6.GetAllProductRepository);

  @override
  _i12.Future<_i3.Either<_i13.Failure, List<_i14.ProductEntity>>> call() =>
      (super.noSuchMethod(
        Invocation.method(
          #call,
          [],
        ),
        returnValue: _i12
            .Future<_i3.Either<_i13.Failure, List<_i14.ProductEntity>>>.value(
            _FakeEither_1<_i13.Failure, List<_i14.ProductEntity>>(
          this,
          Invocation.method(
            #call,
            [],
          ),
        )),
      ) as _i12.Future<_i3.Either<_i13.Failure, List<_i14.ProductEntity>>>);
}

/// A class which mocks [GetProductUsecase].
///
/// See the documentation for Mockito's code generation for more information.
class MockGetProductUsecase extends _i1.Mock implements _i18.GetProductUsecase {
  MockGetProductUsecase() {
    _i1.throwOnMissingStub(this);
  }

  @override
  _i7.GetProductRepository get getProductRepository => (super.noSuchMethod(
        Invocation.getter(#getProductRepository),
        returnValue: _FakeGetProductRepository_5(
          this,
          Invocation.getter(#getProductRepository),
        ),
      ) as _i7.GetProductRepository);

  @override
  _i12.Future<_i3.Either<_i13.Failure, _i14.ProductEntity>> call(String? id) =>
      (super.noSuchMethod(
        Invocation.method(
          #call,
          [id],
        ),
        returnValue:
            _i12.Future<_i3.Either<_i13.Failure, _i14.ProductEntity>>.value(
                _FakeEither_1<_i13.Failure, _i14.ProductEntity>(
          this,
          Invocation.method(
            #call,
            [id],
          ),
        )),
      ) as _i12.Future<_i3.Either<_i13.Failure, _i14.ProductEntity>>);
}

/// A class which mocks [GetProductRepository].
///
/// See the documentation for Mockito's code generation for more information.
class MockGetProductRepository extends _i1.Mock
    implements _i7.GetProductRepository {
  MockGetProductRepository() {
    _i1.throwOnMissingStub(this);
  }

  @override
  _i12.Future<_i3.Either<_i13.Failure, _i14.ProductEntity>> getProduct(
          String? id) =>
      (super.noSuchMethod(
        Invocation.method(
          #getProduct,
          [id],
        ),
        returnValue:
            _i12.Future<_i3.Either<_i13.Failure, _i14.ProductEntity>>.value(
                _FakeEither_1<_i13.Failure, _i14.ProductEntity>(
          this,
          Invocation.method(
            #getProduct,
            [id],
          ),
        )),
      ) as _i12.Future<_i3.Either<_i13.Failure, _i14.ProductEntity>>);
}

/// A class which mocks [GetAllProductRepository].
///
/// See the documentation for Mockito's code generation for more information.
class MockGetAllProductRepository extends _i1.Mock
    implements _i6.GetAllProductRepository {
  MockGetAllProductRepository() {
    _i1.throwOnMissingStub(this);
  }

  @override
  _i12.Future<_i3.Either<_i13.Failure, List<_i14.ProductEntity>>>
      getAllProduct() => (super.noSuchMethod(
            Invocation.method(
              #getAllProduct,
              [],
            ),
            returnValue: _i12.Future<
                    _i3.Either<_i13.Failure, List<_i14.ProductEntity>>>.value(
                _FakeEither_1<_i13.Failure, List<_i14.ProductEntity>>(
              this,
              Invocation.method(
                #getAllProduct,
                [],
              ),
            )),
          ) as _i12.Future<_i3.Either<_i13.Failure, List<_i14.ProductEntity>>>);
}

/// A class which mocks [UpdateProductRepository].
///
/// See the documentation for Mockito's code generation for more information.
class MockUpdateProductRepository extends _i1.Mock
    implements _i4.UpdateProductRepository {
  MockUpdateProductRepository() {
    _i1.throwOnMissingStub(this);
  }

  @override
  _i12.Future<_i3.Either<_i13.Failure, _i14.ProductEntity>> updateProduct(
          _i14.ProductEntity? product) =>
      (super.noSuchMethod(
        Invocation.method(
          #updateProduct,
          [product],
        ),
        returnValue:
            _i12.Future<_i3.Either<_i13.Failure, _i14.ProductEntity>>.value(
                _FakeEither_1<_i13.Failure, _i14.ProductEntity>(
          this,
          Invocation.method(
            #updateProduct,
            [product],
          ),
        )),
      ) as _i12.Future<_i3.Either<_i13.Failure, _i14.ProductEntity>>);
}

/// A class which mocks [CreateProductRepository].
///
/// See the documentation for Mockito's code generation for more information.
class MockCreateProductRepository extends _i1.Mock
    implements _i2.CreateProductRepository {
  MockCreateProductRepository() {
    _i1.throwOnMissingStub(this);
  }

  @override
  _i12.Future<_i3.Either<_i13.Failure, _i14.ProductEntity>> createProduct(
          _i14.ProductEntity? product) =>
      (super.noSuchMethod(
        Invocation.method(
          #createProduct,
          [product],
        ),
        returnValue:
            _i12.Future<_i3.Either<_i13.Failure, _i14.ProductEntity>>.value(
                _FakeEither_1<_i13.Failure, _i14.ProductEntity>(
          this,
          Invocation.method(
            #createProduct,
            [product],
          ),
        )),
      ) as _i12.Future<_i3.Either<_i13.Failure, _i14.ProductEntity>>);
}

/// A class which mocks [DeleteProductRepository].
///
/// See the documentation for Mockito's code generation for more information.
class MockDeleteProductRepository extends _i1.Mock
    implements _i5.DeleteProductRepository {
  MockDeleteProductRepository() {
    _i1.throwOnMissingStub(this);
  }

  @override
  _i12.Future<_i3.Either<_i13.Failure, void>> deleteProduct(String? id) =>
      (super.noSuchMethod(
        Invocation.method(
          #deleteProduct,
          [id],
        ),
        returnValue: _i12.Future<_i3.Either<_i13.Failure, void>>.value(
            _FakeEither_1<_i13.Failure, void>(
          this,
          Invocation.method(
            #deleteProduct,
            [id],
          ),
        )),
      ) as _i12.Future<_i3.Either<_i13.Failure, void>>);
}

/// A class which mocks [ProductRemoteDatasource].
///
/// See the documentation for Mockito's code generation for more information.
class MockProductRemoteDatasource extends _i1.Mock
    implements _i19.ProductRemoteDatasource {
  MockProductRemoteDatasource() {
    _i1.throwOnMissingStub(this);
  }

  @override
  _i12.Future<_i8.ProductModel> createProduct(_i8.ProductModel? product) =>
      (super.noSuchMethod(
        Invocation.method(
          #createProduct,
          [product],
        ),
        returnValue: _i12.Future<_i8.ProductModel>.value(_FakeProductModel_6(
          this,
          Invocation.method(
            #createProduct,
            [product],
          ),
        )),
      ) as _i12.Future<_i8.ProductModel>);

  @override
  _i12.Future<void> deleteProduct(String? id) => (super.noSuchMethod(
        Invocation.method(
          #deleteProduct,
          [id],
        ),
        returnValue: _i12.Future<void>.value(),
        returnValueForMissingStub: _i12.Future<void>.value(),
      ) as _i12.Future<void>);

  @override
  _i12.Future<List<_i8.ProductModel>> getAllProduct() => (super.noSuchMethod(
        Invocation.method(
          #getAllProduct,
          [],
        ),
        returnValue:
            _i12.Future<List<_i8.ProductModel>>.value(<_i8.ProductModel>[]),
      ) as _i12.Future<List<_i8.ProductModel>>);

  @override
  _i12.Future<_i8.ProductModel> getProduct(String? id) => (super.noSuchMethod(
        Invocation.method(
          #getProduct,
          [id],
        ),
        returnValue: _i12.Future<_i8.ProductModel>.value(_FakeProductModel_6(
          this,
          Invocation.method(
            #getProduct,
            [id],
          ),
        )),
      ) as _i12.Future<_i8.ProductModel>);

  @override
  _i12.Future<_i8.ProductModel> updateProduct(_i8.ProductModel? product) =>
      (super.noSuchMethod(
        Invocation.method(
          #updateProduct,
          [product],
        ),
        returnValue: _i12.Future<_i8.ProductModel>.value(_FakeProductModel_6(
          this,
          Invocation.method(
            #updateProduct,
            [product],
          ),
        )),
      ) as _i12.Future<_i8.ProductModel>);
}

/// A class which mocks [ProductLocalDataSource].
///
/// See the documentation for Mockito's code generation for more information.
class MockProductLocalDataSource extends _i1.Mock
    implements _i20.ProductLocalDataSource {
  MockProductLocalDataSource() {
    _i1.throwOnMissingStub(this);
  }

  @override
  _i12.Future<void> cacheProduct(_i8.ProductModel? product) =>
      (super.noSuchMethod(
        Invocation.method(
          #cacheProduct,
          [product],
        ),
        returnValue: _i12.Future<void>.value(),
        returnValueForMissingStub: _i12.Future<void>.value(),
      ) as _i12.Future<void>);

  @override
  _i12.Future<_i8.ProductModel> getAllCachedProduct() => (super.noSuchMethod(
        Invocation.method(
          #getAllCachedProduct,
          [],
        ),
        returnValue: _i12.Future<_i8.ProductModel>.value(_FakeProductModel_6(
          this,
          Invocation.method(
            #getAllCachedProduct,
            [],
          ),
        )),
      ) as _i12.Future<_i8.ProductModel>);
}

/// A class which mocks [NetworkInfo].
///
/// See the documentation for Mockito's code generation for more information.
class MockNetworkInfo extends _i1.Mock implements _i21.NetworkInfo {
  MockNetworkInfo() {
    _i1.throwOnMissingStub(this);
  }

  @override
  _i12.Future<bool> get isConnected => (super.noSuchMethod(
        Invocation.getter(#isConnected),
        returnValue: _i12.Future<bool>.value(false),
      ) as _i12.Future<bool>);
}

/// A class which mocks [InternetConnectionChecker].
///
/// See the documentation for Mockito's code generation for more information.
class MockInternetConnectionChecker extends _i1.Mock
    implements _i9.InternetConnectionChecker {
  MockInternetConnectionChecker() {
    _i1.throwOnMissingStub(this);
  }

  @override
  Duration get checkInterval => (super.noSuchMethod(
        Invocation.getter(#checkInterval),
        returnValue: _FakeDuration_7(
          this,
          Invocation.getter(#checkInterval),
        ),
      ) as Duration);

  @override
  Duration get checkTimeout => (super.noSuchMethod(
        Invocation.getter(#checkTimeout),
        returnValue: _FakeDuration_7(
          this,
          Invocation.getter(#checkTimeout),
        ),
      ) as Duration);

  @override
  List<_i9.AddressCheckOptions> get addresses => (super.noSuchMethod(
        Invocation.getter(#addresses),
        returnValue: <_i9.AddressCheckOptions>[],
      ) as List<_i9.AddressCheckOptions>);

  @override
  set addresses(List<_i9.AddressCheckOptions>? value) => super.noSuchMethod(
        Invocation.setter(
          #addresses,
          value,
        ),
        returnValueForMissingStub: null,
      );

  @override
  _i12.Future<bool> get hasConnection => (super.noSuchMethod(
        Invocation.getter(#hasConnection),
        returnValue: _i12.Future<bool>.value(false),
      ) as _i12.Future<bool>);

  @override
  _i12.Future<_i9.InternetConnectionStatus> get connectionStatus =>
      (super.noSuchMethod(
        Invocation.getter(#connectionStatus),
        returnValue: _i12.Future<_i9.InternetConnectionStatus>.value(
            _i9.InternetConnectionStatus.connected),
      ) as _i12.Future<_i9.InternetConnectionStatus>);

  @override
  _i12.Stream<_i9.InternetConnectionStatus> get onStatusChange =>
      (super.noSuchMethod(
        Invocation.getter(#onStatusChange),
        returnValue: _i12.Stream<_i9.InternetConnectionStatus>.empty(),
      ) as _i12.Stream<_i9.InternetConnectionStatus>);

  @override
  bool get hasListeners => (super.noSuchMethod(
        Invocation.getter(#hasListeners),
        returnValue: false,
      ) as bool);

  @override
  bool get isActivelyChecking => (super.noSuchMethod(
        Invocation.getter(#isActivelyChecking),
        returnValue: false,
      ) as bool);

  @override
  _i12.Future<_i9.AddressCheckResult> isHostReachable(
          _i9.AddressCheckOptions? options) =>
      (super.noSuchMethod(
        Invocation.method(
          #isHostReachable,
          [options],
        ),
        returnValue:
            _i12.Future<_i9.AddressCheckResult>.value(_FakeAddressCheckResult_8(
          this,
          Invocation.method(
            #isHostReachable,
            [options],
          ),
        )),
      ) as _i12.Future<_i9.AddressCheckResult>);
}

/// A class which mocks [SharedPreferences].
///
/// See the documentation for Mockito's code generation for more information.
class MockSharedPreferences extends _i1.Mock implements _i22.SharedPreferences {
  MockSharedPreferences() {
    _i1.throwOnMissingStub(this);
  }

  @override
  Set<String> getKeys() => (super.noSuchMethod(
        Invocation.method(
          #getKeys,
          [],
        ),
        returnValue: <String>{},
      ) as Set<String>);

  @override
  Object? get(String? key) => (super.noSuchMethod(Invocation.method(
        #get,
        [key],
      )) as Object?);

  @override
  bool? getBool(String? key) => (super.noSuchMethod(Invocation.method(
        #getBool,
        [key],
      )) as bool?);

  @override
  int? getInt(String? key) => (super.noSuchMethod(Invocation.method(
        #getInt,
        [key],
      )) as int?);

  @override
  double? getDouble(String? key) => (super.noSuchMethod(Invocation.method(
        #getDouble,
        [key],
      )) as double?);

  @override
  String? getString(String? key) => (super.noSuchMethod(Invocation.method(
        #getString,
        [key],
      )) as String?);

  @override
  bool containsKey(String? key) => (super.noSuchMethod(
        Invocation.method(
          #containsKey,
          [key],
        ),
        returnValue: false,
      ) as bool);

  @override
  List<String>? getStringList(String? key) =>
      (super.noSuchMethod(Invocation.method(
        #getStringList,
        [key],
      )) as List<String>?);

  @override
  _i12.Future<bool> setBool(
    String? key,
    bool? value,
  ) =>
      (super.noSuchMethod(
        Invocation.method(
          #setBool,
          [
            key,
            value,
          ],
        ),
        returnValue: _i12.Future<bool>.value(false),
      ) as _i12.Future<bool>);

  @override
  _i12.Future<bool> setInt(
    String? key,
    int? value,
  ) =>
      (super.noSuchMethod(
        Invocation.method(
          #setInt,
          [
            key,
            value,
          ],
        ),
        returnValue: _i12.Future<bool>.value(false),
      ) as _i12.Future<bool>);

  @override
  _i12.Future<bool> setDouble(
    String? key,
    double? value,
  ) =>
      (super.noSuchMethod(
        Invocation.method(
          #setDouble,
          [
            key,
            value,
          ],
        ),
        returnValue: _i12.Future<bool>.value(false),
      ) as _i12.Future<bool>);

  @override
  _i12.Future<bool> setString(
    String? key,
    String? value,
  ) =>
      (super.noSuchMethod(
        Invocation.method(
          #setString,
          [
            key,
            value,
          ],
        ),
        returnValue: _i12.Future<bool>.value(false),
      ) as _i12.Future<bool>);

  @override
  _i12.Future<bool> setStringList(
    String? key,
    List<String>? value,
  ) =>
      (super.noSuchMethod(
        Invocation.method(
          #setStringList,
          [
            key,
            value,
          ],
        ),
        returnValue: _i12.Future<bool>.value(false),
      ) as _i12.Future<bool>);

  @override
  _i12.Future<bool> remove(String? key) => (super.noSuchMethod(
        Invocation.method(
          #remove,
          [key],
        ),
        returnValue: _i12.Future<bool>.value(false),
      ) as _i12.Future<bool>);

  @override
  _i12.Future<bool> commit() => (super.noSuchMethod(
        Invocation.method(
          #commit,
          [],
        ),
        returnValue: _i12.Future<bool>.value(false),
      ) as _i12.Future<bool>);

  @override
  _i12.Future<bool> clear() => (super.noSuchMethod(
        Invocation.method(
          #clear,
          [],
        ),
        returnValue: _i12.Future<bool>.value(false),
      ) as _i12.Future<bool>);

  @override
  _i12.Future<void> reload() => (super.noSuchMethod(
        Invocation.method(
          #reload,
          [],
        ),
        returnValue: _i12.Future<void>.value(),
        returnValueForMissingStub: _i12.Future<void>.value(),
      ) as _i12.Future<void>);
}

/// A class which mocks [Client].
///
/// See the documentation for Mockito's code generation for more information.
class MockHttpClient extends _i1.Mock implements _i10.Client {
  MockHttpClient() {
    _i1.throwOnMissingStub(this);
  }

  @override
  _i12.Future<_i10.Response> head(
    Uri? url, {
    Map<String, String>? headers,
  }) =>
      (super.noSuchMethod(
        Invocation.method(
          #head,
          [url],
          {#headers: headers},
        ),
        returnValue: _i12.Future<_i10.Response>.value(_FakeResponse_9(
          this,
          Invocation.method(
            #head,
            [url],
            {#headers: headers},
          ),
        )),
      ) as _i12.Future<_i10.Response>);

  @override
  _i12.Future<_i10.Response> get(
    Uri? url, {
    Map<String, String>? headers,
  }) =>
      (super.noSuchMethod(
        Invocation.method(
          #get,
          [url],
          {#headers: headers},
        ),
        returnValue: _i12.Future<_i10.Response>.value(_FakeResponse_9(
          this,
          Invocation.method(
            #get,
            [url],
            {#headers: headers},
          ),
        )),
      ) as _i12.Future<_i10.Response>);

  @override
  _i12.Future<_i10.Response> post(
    Uri? url, {
    Map<String, String>? headers,
    Object? body,
    _i23.Encoding? encoding,
  }) =>
      (super.noSuchMethod(
        Invocation.method(
          #post,
          [url],
          {
            #headers: headers,
            #body: body,
            #encoding: encoding,
          },
        ),
        returnValue: _i12.Future<_i10.Response>.value(_FakeResponse_9(
          this,
          Invocation.method(
            #post,
            [url],
            {
              #headers: headers,
              #body: body,
              #encoding: encoding,
            },
          ),
        )),
      ) as _i12.Future<_i10.Response>);

  @override
  _i12.Future<_i10.Response> put(
    Uri? url, {
    Map<String, String>? headers,
    Object? body,
    _i23.Encoding? encoding,
  }) =>
      (super.noSuchMethod(
        Invocation.method(
          #put,
          [url],
          {
            #headers: headers,
            #body: body,
            #encoding: encoding,
          },
        ),
        returnValue: _i12.Future<_i10.Response>.value(_FakeResponse_9(
          this,
          Invocation.method(
            #put,
            [url],
            {
              #headers: headers,
              #body: body,
              #encoding: encoding,
            },
          ),
        )),
      ) as _i12.Future<_i10.Response>);

  @override
  _i12.Future<_i10.Response> patch(
    Uri? url, {
    Map<String, String>? headers,
    Object? body,
    _i23.Encoding? encoding,
  }) =>
      (super.noSuchMethod(
        Invocation.method(
          #patch,
          [url],
          {
            #headers: headers,
            #body: body,
            #encoding: encoding,
          },
        ),
        returnValue: _i12.Future<_i10.Response>.value(_FakeResponse_9(
          this,
          Invocation.method(
            #patch,
            [url],
            {
              #headers: headers,
              #body: body,
              #encoding: encoding,
            },
          ),
        )),
      ) as _i12.Future<_i10.Response>);

  @override
  _i12.Future<_i10.Response> delete(
    Uri? url, {
    Map<String, String>? headers,
    Object? body,
    _i23.Encoding? encoding,
  }) =>
      (super.noSuchMethod(
        Invocation.method(
          #delete,
          [url],
          {
            #headers: headers,
            #body: body,
            #encoding: encoding,
          },
        ),
        returnValue: _i12.Future<_i10.Response>.value(_FakeResponse_9(
          this,
          Invocation.method(
            #delete,
            [url],
            {
              #headers: headers,
              #body: body,
              #encoding: encoding,
            },
          ),
        )),
      ) as _i12.Future<_i10.Response>);

  @override
  _i12.Future<String> read(
    Uri? url, {
    Map<String, String>? headers,
  }) =>
      (super.noSuchMethod(
        Invocation.method(
          #read,
          [url],
          {#headers: headers},
        ),
        returnValue: _i12.Future<String>.value(_i24.dummyValue<String>(
          this,
          Invocation.method(
            #read,
            [url],
            {#headers: headers},
          ),
        )),
      ) as _i12.Future<String>);

  @override
  _i12.Future<_i25.Uint8List> readBytes(
    Uri? url, {
    Map<String, String>? headers,
  }) =>
      (super.noSuchMethod(
        Invocation.method(
          #readBytes,
          [url],
          {#headers: headers},
        ),
        returnValue: _i12.Future<_i25.Uint8List>.value(_i25.Uint8List(0)),
      ) as _i12.Future<_i25.Uint8List>);

  @override
  _i12.Future<_i10.StreamedResponse> send(_i10.BaseRequest? request) =>
      (super.noSuchMethod(
        Invocation.method(
          #send,
          [request],
        ),
        returnValue:
            _i12.Future<_i10.StreamedResponse>.value(_FakeStreamedResponse_10(
          this,
          Invocation.method(
            #send,
            [request],
          ),
        )),
      ) as _i12.Future<_i10.StreamedResponse>);

  @override
  void close() => super.noSuchMethod(
        Invocation.method(
          #close,
          [],
        ),
        returnValueForMissingStub: null,
      );
}
